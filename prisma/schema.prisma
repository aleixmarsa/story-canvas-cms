generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StoryStatus {
  draft
  published
  changed
}

enum Role {
  ADMIN
  EDITOR
}

model Story {
  id Int @id @default(autoincrement())

  // Slug of the currently published version
  publicSlug String? @unique

  // Relations to the active draft and published versions
  currentDraftId     Int? @unique
  publishedVersionId Int? @unique

  // Edit/locking metadata
  lockedBy     String?
  lastEditedBy String?

  // Timestamps
  deletedAt   DateTime?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  versions StoryVersion[]
  sections Section[]

  // Relation with User
  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id])

  // Draft and published version relations
  currentDraft     StoryVersion? @relation("CurrentDraft", fields: [currentDraftId], references: [id])
  publishedVersion StoryVersion? @relation("PublishedVersion", fields: [publishedVersionId], references: [id])
}

model StoryVersion {
  id      Int @id @default(autoincrement())
  storyId Int

  // Main editable metadata
  title       String
  slug        String
  createdBy   String
  description String?

  // Version metadata
  status    StoryStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   String?

  // Relations
  story          Story  @relation(fields: [storyId], references: [id])
  currentDraftOf Story? @relation("CurrentDraft")
  publishedOf    Story? @relation("PublishedVersion")

  @@index([storyId, status])
}

model Section {
  id      Int @id @default(autoincrement())
  storyId Int

  // Relations to the active draft and published versions
  currentDraftId     Int? @unique
  publishedVersionId Int? @unique

  // Edit/locking metadata
  lockedBy     String?
  lastEditedBy String?

  // Timestamps
  deletedAt   DateTime?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation with User
  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id])

  // Relations
  versions         SectionVersion[]
  story            Story            @relation(fields: [storyId], references: [id])
  currentDraft     SectionVersion?  @relation("SectionCurrentDraft", fields: [currentDraftId], references: [id])
  publishedVersion SectionVersion?  @relation("SectionPublishedVersion", fields: [publishedVersionId], references: [id])
}

model SectionVersion {
  id        Int @id @default(autoincrement())
  sectionId Int

  // Editable metadata
  name      String
  slug      String
  createdBy String
  type      String
  order     Int

  // Section content (e.g. text, image, etc.)
  content Json

  // Version metadata
  status    StoryStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   String?

  // Relations
  section        Section  @relation(fields: [sectionId], references: [id])
  currentDraftOf Section? @relation("SectionCurrentDraft")
  publishedOf    Section? @relation("SectionPublishedVersion")

  @@index([sectionId, status])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations with stories and sections
  createdStories  Story[]
  createdSections Section[]
}
